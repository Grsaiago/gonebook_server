// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contact.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contact (first_name, last_name, age, phone)
VALUES ($1, $2, $3, $4)
RETURNING id, first_name, last_name, age, phone, created_at, updated_at
`

type CreateContactParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Age       int32  `json:"age"`
	Phone     string `json:"phone"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.Age,
		arg.Phone,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contact
WHERE Id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteContact, id)
	return err
}

const getAllContacts = `-- name: GetAllContacts :many
SELECT id, first_name, last_name, age, phone, created_at, updated_at FROM contact
`

func (q *Queries) GetAllContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.Query(ctx, getAllContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Age,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactById = `-- name: GetContactById :one
SELECT id, first_name, last_name, age, phone, created_at, updated_at FROM contact
WHERE Id = $1
`

func (q *Queries) GetContactById(ctx context.Context, id pgtype.UUID) (Contact, error) {
	row := q.db.QueryRow(ctx, getContactById, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContactByPhone = `-- name: GetContactByPhone :many
SELECT id, first_name, last_name, age, phone, created_at, updated_at FROM contact
WHERE Phone = $1
`

func (q *Queries) GetContactByPhone(ctx context.Context, phone string) ([]Contact, error) {
	rows, err := q.db.Query(ctx, getContactByPhone, phone)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Age,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contact
	set first_name = $2,
	last_name = $3,
	age = $4,
	phone = $5
WHERE id = $1
RETURNING id, first_name, last_name, age, phone, created_at, updated_at
`

type UpdateContactParams struct {
	ID        pgtype.UUID `json:"id"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Age       int32       `json:"age"`
	Phone     string      `json:"phone"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, updateContact,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Age,
		arg.Phone,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
